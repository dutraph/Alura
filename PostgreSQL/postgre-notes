######## Comandos PostgreSQL ########

CREATE DATABASE alura; - Cria um banco.
## Dessa forma criamos um DB com parametros. ** OBS ** atenção ao uso de ; na quebra de linha.
CREATE DATABASE teste
    WITH 
    OWNER = postgres
    ENCODING = 'UTF8'
    CONNECTION LIMIT = -1;  ## o -1 significa que nao há limite de conexão.

\list ou \l - Lista os bancos de dados existentes.
\connect <nome-db> ou \c <nome-db> - Conecta a um DB diferente.
\c <nome-db> <nome_usuário> - Conecta com outro usuário ao banco
\d - listar tabelas do DB
SELECT current_database(); - checar o DB que esta sendo usado
DROP DATABASE alura; - Deleta um banco.

** Data Types numericos (https://www.postgresql.org/docs/12/datatype-numeric.html)**
integer - numero inteiros
real - numeros decimais com precisao de 6 digitos
serial - numeros inteiros (apenas positivos) com autoincremento.
numeric - podemos especificar o numero de casas decimais que queremos no numero. EX: dinheiro NUMERIC(10 TAMANHO, 2 CASAS DECIMAIS ) # 12345678,90

** Data Types texto (https://www.postgresql.org/docs/12/datatype-character.html) **
varchar(n) - texto de tamanho variavel, exemplo: (até 255 caracteres)
char(n) - texto de tamanho fixo, Ex: (CPF 11 caracteres)
text - texto de tamaho indefinido Ex: descrição de produto

** Data Types booleanos (https://www.postgresql.org/docs/12/datatype-boolean.html) **
boolean - true ou false

 ** Data Types Date/Time (https://www.postgresql.org/docs/12/datatype-datetime.html) **
date - representa tipo data
time - representa tipo hora
timestamp - representa data e hora

## Criando uma tabela com atributos
CREATE TABLE aluno (
	id SERIAL,
	nome VARCHAR(255),
	cpf CHAR(11),
	observacao TEXT,
	idade INTEGER,
	dinheiro NUMERIC(10,2),
	altura REAL,
	ativo BOOLEAN,
	data_nascimento DATE,
	hora_aula TIME,
	matriculado_em TIMESTAMP
);

## Inserindo dados em uma tabela especificando os valores dos atributos

INSERT INTO aluno (
	nome,
	cpf,
	observacao,
	idade,
	dinheiro,
	altura,
	ativo,
	data_nascimento,
	hora_aula,
	matriculado_em
)
VALUES (
	'PAULO',
	'145.771.107-92',
	'UAHUSDHAGDYASGDASBDAHSBDYASGDAS',
	30,
	100.90,
	1.81,
	TRUE,
	'1990-08-23',
	'17:30:23',
	'2020-02-08 12:04:42'
);

SELECT * FROM aluno;

SELECT id, nome, idade, altura, matriculado_em FROM aluno;

## Atualizando dados 
UPDATE aluno
SET	nome = 'Maria',
	cpf = '1488217739',
	observacao = 'Maria tem 27 anos e é aluna do mestrado de Controlo de qualidade na UPorto.',
	idade = 27,
	dinheiro = 4000.00,
	altura = 1.60,
	ativo = TRUE,
	data_nascimento = '1992-12-23',
	hora_aula = '07:00:00',
	matriculado_em = '2020-08-30 12:37:34'
WHERE id = 1;


## Deletando dados https://www.postgresql.org/docs/12/sql-delete.html

DELETE FROM aluno WHERE nome = 'Maria';

DELETE FROM produtos WHERE estoque = 0;

 ## Usando o AS podemos passar ALIAS para os atributos
SELECT nome AS "Nome do Aluno",
	idade AS "Idade do Aluno", 
	matriculado_em AS "Data e Hora da Matricula"
FROM aluno;

INSERT INTO aluno (nome) VALUES ('Jack');
INSERT INTO aluno (nome) VALUES ('Peter');
INSERT INTO aluno (nome) VALUES ('John');
INSERT INTO aluno (nome) VALUES ('Jonas');

##### FILTROS COM TEXTOS #####

SELECT * 
	FROM aluno
  	WHERE nome <> 'Jack'; ## Sinal <> ou != significa diferente
## OU ## 
SELECT * 
	FROM aluno
  	WHERE nome != 'Jack';

## Busca por similares
 SELECT *
 	FROM aluno
 	WHERE nome LIKE 'J___';

## Busca por diferentes
  SELECT *
 	FROM aluno
 	WHERE nome NOT LIKE 'J___';


 ## Busca por todos que começem com 'J'
 SELECT *
 	FROM aluno
	WHERE nome LIKE 'J%';

## Busca por todos que termina com 'a'

 SELECT *
 	FROM aluno
	WHERE nome LIKE '%a';

## Busca por todos que tem espaço no nome
 SELECT *
 	FROM aluno
	WHERE nome LIKE '% %';

## Busca por todos que tem começem com qualquer coisa, tenha um 'a', depois qualqer coisa, tenha um 'u', depois termine com qualquer coisa
 SELECT *
 	FROM aluno
	WHERE nome LIKE '%a%u%';

##### FILTROS COM NUMEROS #####

SELECT * 
	FROM aluno
	WHERE cpf IS NULL;
	
SELECT * 
	FROM aluno
	WHERE cpf IS NOT NULL;

SELECT nome AS "Nome do aluno", 
	   idade AS "Idade" 
	FROM aluno 
	WHERE idade !=30;

	SELECT nome AS "Nome do aluno", 
	   idade AS "Idade" 
	FROM aluno 
	WHERE idade >=27;

## OPERADOR BETWEEN É INCLUSIVO (RETORNA TD ENTRE 27 E 30 INCLUSIVE 27 E 30)
	
SELECT nome AS "Nome do aluno", 
	   idade AS "Idade" 
	FROM aluno 
	WHERE idade BETWEEN 27 AND 30;

SELECT * 
	FROM aluno 
	WHERE ativo = true;

## Filtra por ordem crescente
SELECT id, nome, idade FROM aluno ORDER BY idade;

## Filtra por ordem decrescente
SELECT id, nome, idade FROM aluno ORDER BY idade DESC;


## Primary Key ** VALORES NAO NULOS E DEVE SER UNICO **
CREATE TABLE curso (id INTEGER PRIMARY KEY, nome VARCHAR(255) NOT NULL);

## Ao inves de usar NOT NULL UNIQUE, MELHOR É USAR PRIMARY KEY, FAZ A MESMA FUNÇAO
CREATE TABLE curso (id INTEGER NOT NULL UNIQUE, nome VARCHAR(255) NOT NULL);

## FOREIGN KEY
/* Criação de tabelas para exemplo FOREIGN KEY */

CREATE TABLE alunos_alura (id SERIAL PRIMARY KEY, nome VARCHAR(255) NOT NULL);
INSERT INTO alunos_alura (nome) VALUES ('joão');
INSERT INTO alunos_alura (nome) VALUES ('Paulo');

CREATE TABLE formacoes_alura (id SERIAL PRIMARY KEY, formacao VARCHAR(255) NOT NULL);

INSERT INTO formacoes_alura (formacao) VALUES ('Java');
INSERT INTO formacoes_alura (formacao) VALUES ('PostgreSQL');

## TABELA FOREIGN KEY - RELACIONA DUAS TABELAS 
CREATE TABLE aluno_formacao (
	aluno_id INTEGER,
	formacao_id INTEGER,
	PRIMARY KEY (aluno_id, formacao_id),
	
	FOREIGN KEY (aluno_id)
	REFERENCES alunos_alura (id),
	
	FOREIGN KEY (formacao_id)
	REFERENCES formacoes_alura (id)
);

INSERT INTO aluno_formacao (aluno_id, formacao_id) VALUES(1, 2); /* Inserindo João no curso de PostgreSQL */
INSERT INTO aluno_formacao (aluno_id, formacao_id) VALUES(2, 1); /* Inserindo Paulo no curso de PostgreSQL */
INSERT INTO aluno_formacao (aluno_id, formacao_id) VALUES(2, 2); /* Inserindo Paulo no curso de Java */

## JUNTANDO (JOIN PRINCIPAL) E VISUALIZANDO DADOS DE UMA FOREIGN KEY

SELECT alunos_alura.nome AS "Nome Aluno", formacoes_alura.formacao AS "Formação" FROM alunos_alura
/* 	JOIN   <TABELA FK> ONDE   ATRIBUTO TABELA FK =   ID TABELA ALUNO */
	JOIN aluno_formacao ON aluno_formacao.aluno_id = alunos_alura.id
/* 	JOIN <TABELA CURSOS> ONDE  ID TABELA CURSO =   ATRIBUTO TABELA FK */
	JOIN formacoes_alura ON formacoes_alura.id = aluno_formacao.formacao_id;












